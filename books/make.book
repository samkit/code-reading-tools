Title: GNU make
Author: Richard M. Stallman, Roland McGrath, Paul D. Smith
Type: Ebook

An introduction to Makefiles
    .DEFAULT_GOAL Pg.5

Writing Makefile
    Priority: GNUmakefile, makefile, Makefile. GNUmakefile is for GNU make only.
    AWESOME: When no makefile is present and make is invoked with a target then based on implicit rules it
        will try to remake the target. Like 3.cpp is present, and `make 3' is given then make using its implicit
        rule with compile and link 3.cpp to 3. Pg.12.
    -I / --include-dir - search files which are not found in cwd. Pg.13
    Other special variables like MAKE_RESTARTS etc. Pg.14
    Immediate and deferred variable assignments. Pg.18-19
    Secondary expansion .SECONDEXPANSION Pg.20

Writing rules
    Types of prerequisites Pg.24
    VPATH Pg.27 -- TODO: Experiment with this
    Special built-in target names like .PHONY Pg.33
        .LOW_RESOLUTION_TIME - ask make to consider time in seconds precision and not more Pg.35
        .EXPORT_ALL_VARIABLES
        .NOTPARALLEL
        .DELETE_ON_ERROR
    Static pattern rules - deducing prerequisites from targets Pg.38
    Double colon rule -- means that its prerequisites will not be intermediate target Pg.39
    Generating prerequisites automatically, like `g++ -MM *.cpp' Pg.40

Writing the commands in rules
    @echo - @ suppresses print command
    -rm -f - `-' ignores errors
    In recursive makefiles, command lines using $(MAKE) are always run even when top level make was run with
        -t, -n or -q option. Pg.51
        or use '+' in the beginning of the command. Pg.75
    Communicating variables to sub-make Pg.51
    MAKELEVEL Pg.51
    Canned commands Pg.55
    NOTE: Each line from command line is executed in its own shell

How to use variables
    Assignments Pg.59
        := simple variables / immediate assignment
         = recursively expanded variable / deferred assignment
        ?= assigns if variable is undefined
        += appends, preserves the type of variables i.e. simple/recursive
    NOTE: Do not put comment on the same line as defining a variable. The space between end of variable
        definition and starting of comment is also treated as variable value. Pg.60
    $(var:.c=.o) - replaces .c from the end of string $(var) or followed up whitespace to .o Pg.60
    Nested variables references cannot specify functions inside them. Pg.62 -- Need more understanding
    `override' directive Pg.65
    Target specific variables values Pg.67
        Target specific values affect variables that come in both prerequisites and as targets themselves
        When multi-target prerequisites is used, then prerequisites will use target specific value from first target.

Conditional parts of makefile
    Syntax of conditional directives Pg.72
        ifdef
        ifndef
        ifeq
        ifneq

Functions for transforming text
    Functions Pg.78
        string functions
            $(subst from,to,text)
            $(patsubst pattern,replacement,text)
            $(strip string)
            $(findstring find,in)
            $(filter patterns...,text)
            $(filter-out patterns...,text)
            $(sort list) -- removes duplicates
            $(word n,list) -- n start from 1
            $(wordlist startIndex,endIndex,list) -- end is inclusive
            $(words list) -- count of number of words
            $(firstword)
            $(lastword)
        file functions
            $(dir names...) -- like dirname()
            $(notdir names...) -- extracts filenames
            $(suffix names...)
            $(basename names...)
            $(addsuffix suffix,names...)
            $(addprefix prefix,names...)
            $(join list1,list2) -- nth word from list1 is concatenated to nth word from list2
            $(wildcard shellpattern)
            $(realpath names...) -- canonical path
            $(abspath names...) -- not canonical path
        conditional functions
            $(if condition,then-part[,else-part]) -- result is string
            $(or condition1[,condition2[,condition3..]])  -- result is first non-empty string from condition1+ or empty
            $(and condition1[,condition2[,condition3..]])  -- result is first non-empty string from condition1+ or empty
        $(foreach var,list,text) -- var,text gets expanded before starting loop. text is expanded in each iteration. Pg.84
        $(call variable,param,param...) :AWESOME: Pg.85
        $(value variable) Pg.86
        $(eval makeSyntax) -- like python.exec() Pg.87
        $(origin variable)
            'undefined'
            'default'
            'environment'
            'environment override'
            'file'
            'command line'
            'override'
            'automatic'
        $(flavor variable) Pg.88
            undefined
            simple
            recursive
        $(shell shellCommand) Pg.89
        Controlling functions
            $(error text...)
            $(warning text...)
            $(info text...)

How to run make
    Anything in makefile is a goal unless then start with `-' or contains `='. Pg.91
    MAKECMDGOALS -- equal to goals specified only on command line. Pg.92
    --keep-going / -k -- ask make to continue even if error came so that all errors can be debuged together.  Pg.96
    --debug[=option] Pg.97
        a (all)
        b (basic) - prints targets which were out of date and if build failed/passed.
        v (verbose) - +basic, prints prerequisites which were not remade, which makefiles parsed
        i (implicit) - +basic, prints implicit rules used
        j (jobs) - prints info about specific sub commands
        m (makefile) - +basic, prints message when remaking makefile
    --print-datab-ase / -p -- prints the database of implicit rules Pg.99

Using implicit rules
    Catalog of implicit rules Pg.102
    Variables used by implicit rules Pg.105


TODO:
    1. Check how .PHONY makes the target as non-default.
    2. Check double colon rule. Pg.110
